{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*!\n  * message-compiler v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nimport { format, assign, isString } from '@intlify/shared';\nconst CompileErrorCodes = {\n  // tokenizer error codes\n  EXPECTED_TOKEN: 1,\n  INVALID_TOKEN_IN_PLACEHOLDER: 2,\n  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n  UNKNOWN_ESCAPE_SEQUENCE: 4,\n  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n  UNBALANCED_CLOSING_BRACE: 6,\n  UNTERMINATED_CLOSING_BRACE: 7,\n  EMPTY_PLACEHOLDER: 8,\n  NOT_ALLOW_NEST_PLACEHOLDER: 9,\n  INVALID_LINKED_FORMAT: 10,\n  // parser error codes\n  MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n  UNEXPECTED_EMPTY_LINKED_KEY: 13,\n  UNEXPECTED_LEXICAL_ANALYSIS: 14,\n  // Special value for higher-order compilers to pick up the last code\n  // to avoid collision of error codes. This should always be kept as the last\n  // item.\n  __EXTEND_POINT__: 15\n};\n/** @internal */\nconst errorMessages = {\n  // tokenizer error messages\n  [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n  [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n  [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n  [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n  [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n  [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n  [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n  [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n  [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n  [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n  // parser error messages\n  [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n  [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`\n};\nfunction createCompileError(code, loc, options = {}) {\n  const {\n    domain,\n    messages,\n    args\n  } = options;\n  const msg = process.env.NODE_ENV !== 'production' ? format((messages || errorMessages)[code] || '', ...(args || [])) : code;\n  const error = new SyntaxError(String(msg));\n  error.code = code;\n  if (loc) {\n    error.location = loc;\n  }\n  error.domain = domain;\n  return error;\n}\n/** @internal */\nfunction defaultOnError(error) {\n  throw error;\n}\nconst LocationStub = {\n  start: {\n    line: 1,\n    column: 1,\n    offset: 0\n  },\n  end: {\n    line: 1,\n    column: 1,\n    offset: 0\n  }\n};\nfunction createPosition(line, column, offset) {\n  return {\n    line,\n    column,\n    offset\n  };\n}\nfunction createLocation(start, end, source) {\n  const loc = {\n    start,\n    end\n  };\n  if (source != null) {\n    loc.source = source;\n  }\n  return loc;\n}\nconst CHAR_SP = ' ';\nconst CHAR_CR = '\\r';\nconst CHAR_LF = '\\n';\nconst CHAR_LS = String.fromCharCode(0x2028);\nconst CHAR_PS = String.fromCharCode(0x2029);\nfunction createScanner(str) {\n  const _buf = str;\n  let _index = 0;\n  let _line = 1;\n  let _column = 1;\n  let _peekOffset = 0;\n  const isCRLF = index => _buf[index] === CHAR_CR && _buf[index + 1] === CHAR_LF;\n  const isLF = index => _buf[index] === CHAR_LF;\n  const isPS = index => _buf[index] === CHAR_PS;\n  const isLS = index => _buf[index] === CHAR_LS;\n  const isLineEnd = index => isCRLF(index) || isLF(index) || isPS(index) || isLS(index);\n  const index = () => _index;\n  const line = () => _line;\n  const column = () => _column;\n  const peekOffset = () => _peekOffset;\n  const charAt = offset => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n  const currentChar = () => charAt(_index);\n  const currentPeek = () => charAt(_index + _peekOffset);\n  function next() {\n    _peekOffset = 0;\n    if (isLineEnd(_index)) {\n      _line++;\n      _column = 0;\n    }\n    if (isCRLF(_index)) {\n      _index++;\n    }\n    _index++;\n    _column++;\n    return _buf[_index];\n  }\n  function peek() {\n    if (isCRLF(_index + _peekOffset)) {\n      _peekOffset++;\n    }\n    _peekOffset++;\n    return _buf[_index + _peekOffset];\n  }\n  function reset() {\n    _index = 0;\n    _line = 1;\n    _column = 1;\n    _peekOffset = 0;\n  }\n  function resetPeek(offset = 0) {\n    _peekOffset = offset;\n  }\n  function skipToPeek() {\n    const target = _index + _peekOffset;\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (target !== _index) {\n      next();\n    }\n    _peekOffset = 0;\n  }\n  return {\n    index,\n    line,\n    column,\n    peekOffset,\n    charAt,\n    currentChar,\n    currentPeek,\n    next,\n    peek,\n    reset,\n    resetPeek,\n    skipToPeek\n  };\n}\nconst EOF = undefined;\nconst LITERAL_DELIMITER = \"'\";\nconst ERROR_DOMAIN$1 = 'tokenizer';\nfunction createTokenizer(source, options = {}) {\n  const location = options.location !== false;\n  const _scnr = createScanner(source);\n  const currentOffset = () => _scnr.index();\n  const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n  const _initLoc = currentPosition();\n  const _initOffset = currentOffset();\n  const _context = {\n    currentType: 14 /* EOF */,\n    offset: _initOffset,\n    startLoc: _initLoc,\n    endLoc: _initLoc,\n    lastType: 14 /* EOF */,\n    lastOffset: _initOffset,\n    lastStartLoc: _initLoc,\n    lastEndLoc: _initLoc,\n    braceNest: 0,\n    inLinked: false,\n    text: ''\n  };\n  const context = () => _context;\n  const {\n    onError\n  } = options;\n  function emitError(code, pos, offset, ...args) {\n    const ctx = context();\n    pos.column += offset;\n    pos.offset += offset;\n    if (onError) {\n      const loc = createLocation(ctx.startLoc, pos);\n      const err = createCompileError(code, loc, {\n        domain: ERROR_DOMAIN$1,\n        args\n      });\n      onError(err);\n    }\n  }\n  function getToken(context, type, value) {\n    context.endLoc = currentPosition();\n    context.currentType = type;\n    const token = {\n      type\n    };\n    if (location) {\n      token.loc = createLocation(context.startLoc, context.endLoc);\n    }\n    if (value != null) {\n      token.value = value;\n    }\n    return token;\n  }\n  const getEndToken = context => getToken(context, 14 /* EOF */);\n  function eat(scnr, ch) {\n    if (scnr.currentChar() === ch) {\n      scnr.next();\n      return ch;\n    } else {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n      return '';\n    }\n  }\n  function peekSpaces(scnr) {\n    let buf = '';\n    while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n      buf += scnr.currentPeek();\n      scnr.peek();\n    }\n    return buf;\n  }\n  function skipSpaces(scnr) {\n    const buf = peekSpaces(scnr);\n    scnr.skipToPeek();\n    return buf;\n  }\n  function isIdentifierStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 ||\n    // a-z\n    cc >= 65 && cc <= 90 ||\n    // A-Z\n    cc === 95 // _\n    ;\n  }\n\n  function isNumberStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57; // 0-9\n  }\n\n  function isNamedIdentifierStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 2 /* BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isListIdentifierStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 2 /* BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ch = scnr.currentPeek() === '-' ? scnr.peek() : scnr.currentPeek();\n    const ret = isNumberStart(ch);\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLiteralStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 2 /* BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === LITERAL_DELIMITER;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDotStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 8 /* LinkedAlias */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \".\" /* LinkedDot */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedModifierStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 9 /* LinkedDot */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDelimiterStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (!(currentType === 8 /* LinkedAlias */ || currentType === 12 /* LinkedModifier */)) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \":\" /* LinkedDelimiter */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedReferStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 10 /* LinkedDelimiter */) {\n      return false;\n    }\n    const fn = () => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\" /* BraceLeft */) {\n        return isIdentifierStart(scnr.peek());\n      } else if (ch === \"@\" /* LinkedAlias */ || ch === \"%\" /* Modulo */ || ch === \"|\" /* Pipe */ || ch === \":\" /* LinkedDelimiter */ || ch === \".\" /* LinkedDot */ || ch === CHAR_SP || !ch) {\n        return false;\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn();\n      } else {\n        // other characters\n        return isIdentifierStart(ch);\n      }\n    };\n    const ret = fn();\n    scnr.resetPeek();\n    return ret;\n  }\n  function isPluralStart(scnr) {\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"|\" /* Pipe */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function detectModuloStart(scnr) {\n    const spaces = peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"%\" /* Modulo */ && scnr.peek() === \"{\" /* BraceLeft */;\n    scnr.resetPeek();\n    return {\n      isModulo: ret,\n      hasSpace: spaces.length > 0\n    };\n  }\n  function isTextStart(scnr, reset = true) {\n    const fn = (hasSpace = false, prev = '', detectModulo = false) => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\" /* BraceLeft */) {\n        return prev === \"%\" /* Modulo */ ? false : hasSpace;\n      } else if (ch === \"@\" /* LinkedAlias */ || !ch) {\n        return prev === \"%\" /* Modulo */ ? true : hasSpace;\n      } else if (ch === \"%\" /* Modulo */) {\n        scnr.peek();\n        return fn(hasSpace, \"%\" /* Modulo */, true);\n      } else if (ch === \"|\" /* Pipe */) {\n        return prev === \"%\" /* Modulo */ || detectModulo ? true : !(prev === CHAR_SP || prev === CHAR_LF);\n      } else if (ch === CHAR_SP) {\n        scnr.peek();\n        return fn(true, CHAR_SP, detectModulo);\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn(true, CHAR_LF, detectModulo);\n      } else {\n        return true;\n      }\n    };\n    const ret = fn();\n    reset && scnr.resetPeek();\n    return ret;\n  }\n  function takeChar(scnr, fn) {\n    const ch = scnr.currentChar();\n    if (ch === EOF) {\n      return EOF;\n    }\n    if (fn(ch)) {\n      scnr.next();\n      return ch;\n    }\n    return null;\n  }\n  function takeIdentifierChar(scnr) {\n    const closure = ch => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 97 && cc <= 122 ||\n      // a-z\n      cc >= 65 && cc <= 90 ||\n      // A-Z\n      cc >= 48 && cc <= 57 ||\n      // 0-9\n      cc === 95 ||\n      // _\n      cc === 36 // $\n      ;\n    };\n\n    return takeChar(scnr, closure);\n  }\n  function takeDigit(scnr) {\n    const closure = ch => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 48 && cc <= 57; // 0-9\n    };\n\n    return takeChar(scnr, closure);\n  }\n  function takeHexDigit(scnr) {\n    const closure = ch => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 48 && cc <= 57 ||\n      // 0-9\n      cc >= 65 && cc <= 70 ||\n      // A-F\n      cc >= 97 && cc <= 102; // a-f\n    };\n\n    return takeChar(scnr, closure);\n  }\n  function getDigits(scnr) {\n    let ch = '';\n    let num = '';\n    while (ch = takeDigit(scnr)) {\n      num += ch;\n    }\n    return num;\n  }\n  function readModulo(scnr) {\n    skipSpaces(scnr);\n    const ch = scnr.currentChar();\n    if (ch !== \"%\" /* Modulo */) {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n    }\n    scnr.next();\n    return \"%\" /* Modulo */;\n  }\n\n  function readText(scnr) {\n    let buf = '';\n    while (true) {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" /* BraceLeft */ || ch === \"}\" /* BraceRight */ || ch === \"@\" /* LinkedAlias */ || ch === \"|\" /* Pipe */ || !ch) {\n        break;\n      } else if (ch === \"%\" /* Modulo */) {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else {\n          break;\n        }\n      } else if (ch === CHAR_SP || ch === CHAR_LF) {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else if (isPluralStart(scnr)) {\n          break;\n        } else {\n          buf += ch;\n          scnr.next();\n        }\n      } else {\n        buf += ch;\n        scnr.next();\n      }\n    }\n    return buf;\n  }\n  function readNamedIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = '';\n    let name = '';\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return name;\n  }\n  function readListIdentifier(scnr) {\n    skipSpaces(scnr);\n    let value = '';\n    if (scnr.currentChar() === '-') {\n      scnr.next();\n      value += `-${getDigits(scnr)}`;\n    } else {\n      value += getDigits(scnr);\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return value;\n  }\n  function readLiteral(scnr) {\n    skipSpaces(scnr);\n    eat(scnr, `\\'`);\n    let ch = '';\n    let literal = '';\n    const fn = x => x !== LITERAL_DELIMITER && x !== CHAR_LF;\n    while (ch = takeChar(scnr, fn)) {\n      if (ch === '\\\\') {\n        literal += readEscapeSequence(scnr);\n      } else {\n        literal += ch;\n      }\n    }\n    const current = scnr.currentChar();\n    if (current === CHAR_LF || current === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n      // TODO: Is it correct really?\n      if (current === CHAR_LF) {\n        scnr.next();\n        eat(scnr, `\\'`);\n      }\n      return literal;\n    }\n    eat(scnr, `\\'`);\n    return literal;\n  }\n  function readEscapeSequence(scnr) {\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case '\\\\':\n      case `\\'`:\n        scnr.next();\n        return `\\\\${ch}`;\n      case 'u':\n        return readUnicodeEscapeSequence(scnr, ch, 4);\n      case 'U':\n        return readUnicodeEscapeSequence(scnr, ch, 6);\n      default:\n        emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n        return '';\n    }\n  }\n  function readUnicodeEscapeSequence(scnr, unicode, digits) {\n    eat(scnr, unicode);\n    let sequence = '';\n    for (let i = 0; i < digits; i++) {\n      const ch = takeHexDigit(scnr);\n      if (!ch) {\n        emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\n        break;\n      }\n      sequence += ch;\n    }\n    return `\\\\${unicode}${sequence}`;\n  }\n  function readInvalidIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = '';\n    let identifiers = '';\n    const closure = ch => ch !== \"{\" /* BraceLeft */ && ch !== \"}\" /* BraceRight */ && ch !== CHAR_SP && ch !== CHAR_LF;\n    while (ch = takeChar(scnr, closure)) {\n      identifiers += ch;\n    }\n    return identifiers;\n  }\n  function readLinkedModifier(scnr) {\n    let ch = '';\n    let name = '';\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    return name;\n  }\n  function readLinkedRefer(scnr) {\n    const fn = (detect = false, buf) => {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" /* BraceLeft */ || ch === \"%\" /* Modulo */ || ch === \"@\" /* LinkedAlias */ || ch === \"|\" /* Pipe */ || !ch) {\n        return buf;\n      } else if (ch === CHAR_SP) {\n        return buf;\n      } else if (ch === CHAR_LF) {\n        buf += ch;\n        scnr.next();\n        return fn(detect, buf);\n      } else {\n        buf += ch;\n        scnr.next();\n        return fn(true, buf);\n      }\n    };\n    return fn(false, '');\n  }\n  function readPlural(scnr) {\n    skipSpaces(scnr);\n    const plural = eat(scnr, \"|\" /* Pipe */);\n    skipSpaces(scnr);\n    return plural;\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readTokenInPlaceholder(scnr, context) {\n    let token = null;\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\" /* BraceLeft */:\n        if (context.braceNest >= 1) {\n          emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context, 2 /* BraceLeft */, \"{\" /* BraceLeft */);\n        skipSpaces(scnr);\n        context.braceNest++;\n        return token;\n      case \"}\" /* BraceRight */:\n        if (context.braceNest > 0 && context.currentType === 2 /* BraceLeft */) {\n          emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context, 3 /* BraceRight */, \"}\" /* BraceRight */);\n        context.braceNest--;\n        context.braceNest > 0 && skipSpaces(scnr);\n        if (context.inLinked && context.braceNest === 0) {\n          context.inLinked = false;\n        }\n        return token;\n      case \"@\" /* LinkedAlias */:\n        if (context.braceNest > 0) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        token = readTokenInLinked(scnr, context) || getEndToken(context);\n        context.braceNest = 0;\n        return token;\n      default:\n        let validNamedIdentifier = true;\n        let validListIdentifier = true;\n        let validLiteral = true;\n        if (isPluralStart(scnr)) {\n          if (context.braceNest > 0) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n          }\n          token = getToken(context, 1 /* Pipe */, readPlural(scnr));\n          // reset\n          context.braceNest = 0;\n          context.inLinked = false;\n          return token;\n        }\n        if (context.braceNest > 0 && (context.currentType === 5 /* Named */ || context.currentType === 6 /* List */ || context.currentType === 7 /* Literal */)) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n          context.braceNest = 0;\n          return readToken(scnr, context);\n        }\n        if (validNamedIdentifier = isNamedIdentifierStart(scnr, context)) {\n          token = getToken(context, 5 /* Named */, readNamedIdentifier(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (validListIdentifier = isListIdentifierStart(scnr, context)) {\n          token = getToken(context, 6 /* List */, readListIdentifier(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (validLiteral = isLiteralStart(scnr, context)) {\n          token = getToken(context, 7 /* Literal */, readLiteral(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n          // TODO: we should be re-designed invalid cases, when we will extend message syntax near the future ...\n          token = getToken(context, 13 /* InvalidPlace */, readInvalidIdentifier(scnr));\n          emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n          skipSpaces(scnr);\n          return token;\n        }\n        break;\n    }\n    return token;\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readTokenInLinked(scnr, context) {\n    const {\n      currentType\n    } = context;\n    let token = null;\n    const ch = scnr.currentChar();\n    if ((currentType === 8 /* LinkedAlias */ || currentType === 9 /* LinkedDot */ || currentType === 12 /* LinkedModifier */ || currentType === 10 /* LinkedDelimiter */) && (ch === CHAR_LF || ch === CHAR_SP)) {\n      emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n    }\n    switch (ch) {\n      case \"@\" /* LinkedAlias */:\n        scnr.next();\n        token = getToken(context, 8 /* LinkedAlias */, \"@\" /* LinkedAlias */);\n        context.inLinked = true;\n        return token;\n      case \".\" /* LinkedDot */:\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context, 9 /* LinkedDot */, \".\" /* LinkedDot */);\n      case \":\" /* LinkedDelimiter */:\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context, 10 /* LinkedDelimiter */, \":\" /* LinkedDelimiter */);\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context, 1 /* Pipe */, readPlural(scnr));\n          // reset\n          context.braceNest = 0;\n          context.inLinked = false;\n          return token;\n        }\n        if (isLinkedDotStart(scnr, context) || isLinkedDelimiterStart(scnr, context)) {\n          skipSpaces(scnr);\n          return readTokenInLinked(scnr, context);\n        }\n        if (isLinkedModifierStart(scnr, context)) {\n          skipSpaces(scnr);\n          return getToken(context, 12 /* LinkedModifier */, readLinkedModifier(scnr));\n        }\n        if (isLinkedReferStart(scnr, context)) {\n          skipSpaces(scnr);\n          if (ch === \"{\" /* BraceLeft */) {\n            // scan the placeholder\n            return readTokenInPlaceholder(scnr, context) || token;\n          } else {\n            return getToken(context, 11 /* LinkedKey */, readLinkedRefer(scnr));\n          }\n        }\n        if (currentType === 8 /* LinkedAlias */) {\n          emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        context.braceNest = 0;\n        context.inLinked = false;\n        return readToken(scnr, context);\n    }\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readToken(scnr, context) {\n    let token = {\n      type: 14 /* EOF */\n    };\n    if (context.braceNest > 0) {\n      return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n    }\n    if (context.inLinked) {\n      return readTokenInLinked(scnr, context) || getEndToken(context);\n    }\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\" /* BraceLeft */:\n        return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n      case \"}\" /* BraceRight */:\n        emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n        scnr.next();\n        return getToken(context, 3 /* BraceRight */, \"}\" /* BraceRight */);\n      case \"@\" /* LinkedAlias */:\n        return readTokenInLinked(scnr, context) || getEndToken(context);\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context, 1 /* Pipe */, readPlural(scnr));\n          // reset\n          context.braceNest = 0;\n          context.inLinked = false;\n          return token;\n        }\n        const {\n          isModulo,\n          hasSpace\n        } = detectModuloStart(scnr);\n        if (isModulo) {\n          return hasSpace ? getToken(context, 0 /* Text */, readText(scnr)) : getToken(context, 4 /* Modulo */, readModulo(scnr));\n        }\n        if (isTextStart(scnr)) {\n          return getToken(context, 0 /* Text */, readText(scnr));\n        }\n        break;\n    }\n    return token;\n  }\n  function nextToken() {\n    const {\n      currentType,\n      offset,\n      startLoc,\n      endLoc\n    } = _context;\n    _context.lastType = currentType;\n    _context.lastOffset = offset;\n    _context.lastStartLoc = startLoc;\n    _context.lastEndLoc = endLoc;\n    _context.offset = currentOffset();\n    _context.startLoc = currentPosition();\n    if (_scnr.currentChar() === EOF) {\n      return getToken(_context, 14 /* EOF */);\n    }\n\n    return readToken(_scnr, _context);\n  }\n  return {\n    nextToken,\n    currentOffset,\n    currentPosition,\n    context\n  };\n}\nconst ERROR_DOMAIN = 'parser';\n// Backslash backslash, backslash quote, uHHHH, UHHHHHH.\nconst KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n  switch (match) {\n    case `\\\\\\\\`:\n      return `\\\\`;\n    case `\\\\\\'`:\n      return `\\'`;\n    default:\n      {\n        const codePoint = parseInt(codePoint4 || codePoint6, 16);\n        if (codePoint <= 0xd7ff || codePoint >= 0xe000) {\n          return String.fromCodePoint(codePoint);\n        }\n        // invalid ...\n        // Replace them with U+FFFD REPLACEMENT CHARACTER.\n        return '�';\n      }\n  }\n}\nfunction createParser(options = {}) {\n  const location = options.location !== false;\n  const {\n    onError\n  } = options;\n  function emitError(tokenzer, code, start, offset, ...args) {\n    const end = tokenzer.currentPosition();\n    end.offset += offset;\n    end.column += offset;\n    if (onError) {\n      const loc = createLocation(start, end);\n      const err = createCompileError(code, loc, {\n        domain: ERROR_DOMAIN,\n        args\n      });\n      onError(err);\n    }\n  }\n  function startNode(type, offset, loc) {\n    const node = {\n      type,\n      start: offset,\n      end: offset\n    };\n    if (location) {\n      node.loc = {\n        start: loc,\n        end: loc\n      };\n    }\n    return node;\n  }\n  function endNode(node, offset, pos, type) {\n    node.end = offset;\n    if (type) {\n      node.type = type;\n    }\n    if (location && node.loc) {\n      node.loc.end = pos;\n    }\n  }\n  function parseText(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(3 /* Text */, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseList(tokenizer, index) {\n    const context = tokenizer.context();\n    const {\n      lastOffset: offset,\n      lastStartLoc: loc\n    } = context; // get brace left loc\n    const node = startNode(5 /* List */, offset, loc);\n    node.index = parseInt(index, 10);\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseNamed(tokenizer, key) {\n    const context = tokenizer.context();\n    const {\n      lastOffset: offset,\n      lastStartLoc: loc\n    } = context; // get brace left loc\n    const node = startNode(4 /* Named */, offset, loc);\n    node.key = key;\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLiteral(tokenizer, value) {\n    const context = tokenizer.context();\n    const {\n      lastOffset: offset,\n      lastStartLoc: loc\n    } = context; // get brace left loc\n    const node = startNode(9 /* Literal */, offset, loc);\n    node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinkedModifier(tokenizer) {\n    const token = tokenizer.nextToken();\n    const context = tokenizer.context();\n    const {\n      lastOffset: offset,\n      lastStartLoc: loc\n    } = context; // get linked dot loc\n    const node = startNode(8 /* LinkedModifier */, offset, loc);\n    if (token.type !== 12 /* LinkedModifier */) {\n      // empty modifier\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n      node.value = '';\n      endNode(node, offset, loc);\n      return {\n        nextConsumeToken: token,\n        node\n      };\n    }\n    // check token\n    if (token.value == null) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    node.value = token.value || '';\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node\n    };\n  }\n  function parseLinkedKey(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(7 /* LinkedKey */, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinked(tokenizer) {\n    const context = tokenizer.context();\n    const linkedNode = startNode(6 /* Linked */, context.offset, context.startLoc);\n    let token = tokenizer.nextToken();\n    if (token.type === 9 /* LinkedDot */) {\n      const parsed = parseLinkedModifier(tokenizer);\n      linkedNode.modifier = parsed.node;\n      token = parsed.nextConsumeToken || tokenizer.nextToken();\n    }\n    // asset check token\n    if (token.type !== 10 /* LinkedDelimiter */) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    token = tokenizer.nextToken();\n    // skip brace left\n    if (token.type === 2 /* BraceLeft */) {\n      token = tokenizer.nextToken();\n    }\n    switch (token.type) {\n      case 11 /* LinkedKey */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLinkedKey(tokenizer, token.value || '');\n        break;\n      case 5 /* Named */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseNamed(tokenizer, token.value || '');\n        break;\n      case 6 /* List */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseList(tokenizer, token.value || '');\n        break;\n      case 7 /* Literal */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLiteral(tokenizer, token.value || '');\n        break;\n      default:\n        // empty key\n        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n        const nextContext = tokenizer.context();\n        const emptyLinkedKeyNode = startNode(7 /* LinkedKey */, nextContext.offset, nextContext.startLoc);\n        emptyLinkedKeyNode.value = '';\n        endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n        linkedNode.key = emptyLinkedKeyNode;\n        endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n        return {\n          nextConsumeToken: token,\n          node: linkedNode\n        };\n    }\n    endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node: linkedNode\n    };\n  }\n  function parseMessage(tokenizer) {\n    const context = tokenizer.context();\n    const startOffset = context.currentType === 1 /* Pipe */ ? tokenizer.currentOffset() : context.offset;\n    const startLoc = context.currentType === 1 /* Pipe */ ? context.endLoc : context.startLoc;\n    const node = startNode(2 /* Message */, startOffset, startLoc);\n    node.items = [];\n    let nextToken = null;\n    do {\n      const token = nextToken || tokenizer.nextToken();\n      nextToken = null;\n      switch (token.type) {\n        case 0 /* Text */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseText(tokenizer, token.value || ''));\n          break;\n        case 6 /* List */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseList(tokenizer, token.value || ''));\n          break;\n        case 5 /* Named */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseNamed(tokenizer, token.value || ''));\n          break;\n        case 7 /* Literal */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseLiteral(tokenizer, token.value || ''));\n          break;\n        case 8 /* LinkedAlias */:\n          const parsed = parseLinked(tokenizer);\n          node.items.push(parsed.node);\n          nextToken = parsed.nextConsumeToken || null;\n          break;\n      }\n    } while (context.currentType !== 14 /* EOF */ && context.currentType !== 1 /* Pipe */);\n    // adjust message node loc\n    const endOffset = context.currentType === 1 /* Pipe */ ? context.lastOffset : tokenizer.currentOffset();\n    const endLoc = context.currentType === 1 /* Pipe */ ? context.lastEndLoc : tokenizer.currentPosition();\n    endNode(node, endOffset, endLoc);\n    return node;\n  }\n  function parsePlural(tokenizer, offset, loc, msgNode) {\n    const context = tokenizer.context();\n    let hasEmptyMessage = msgNode.items.length === 0;\n    const node = startNode(1 /* Plural */, offset, loc);\n    node.cases = [];\n    node.cases.push(msgNode);\n    do {\n      const msg = parseMessage(tokenizer);\n      if (!hasEmptyMessage) {\n        hasEmptyMessage = msg.items.length === 0;\n      }\n      node.cases.push(msg);\n    } while (context.currentType !== 14 /* EOF */);\n    if (hasEmptyMessage) {\n      emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseResource(tokenizer) {\n    const context = tokenizer.context();\n    const {\n      offset,\n      startLoc\n    } = context;\n    const msgNode = parseMessage(tokenizer);\n    if (context.currentType === 14 /* EOF */) {\n      return msgNode;\n    } else {\n      return parsePlural(tokenizer, offset, startLoc, msgNode);\n    }\n  }\n  function parse(source) {\n    const tokenizer = createTokenizer(source, assign({}, options));\n    const context = tokenizer.context();\n    const node = startNode(0 /* Resource */, context.offset, context.startLoc);\n    if (location && node.loc) {\n      node.loc.source = source;\n    }\n    node.body = parseResource(tokenizer);\n    // assert whether achieved to EOF\n    if (context.currentType !== 14 /* EOF */) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || '');\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  return {\n    parse\n  };\n}\nfunction getTokenCaption(token) {\n  if (token.type === 14 /* EOF */) {\n    return 'EOF';\n  }\n  const name = (token.value || '').replace(/\\r?\\n/gu, '\\\\n');\n  return name.length > 10 ? name.slice(0, 9) + '…' : name;\n}\nfunction createTransformer(ast, options = {} // eslint-disable-line\n) {\n  const _context = {\n    ast,\n    helpers: new Set()\n  };\n  const context = () => _context;\n  const helper = name => {\n    _context.helpers.add(name);\n    return name;\n  };\n  return {\n    context,\n    helper\n  };\n}\nfunction traverseNodes(nodes, transformer) {\n  for (let i = 0; i < nodes.length; i++) {\n    traverseNode(nodes[i], transformer);\n  }\n}\nfunction traverseNode(node, transformer) {\n  // TODO: if we need pre-hook of transform, should be implemented to here\n  switch (node.type) {\n    case 1 /* Plural */:\n      traverseNodes(node.cases, transformer);\n      transformer.helper(\"plural\" /* PLURAL */);\n      break;\n    case 2 /* Message */:\n      traverseNodes(node.items, transformer);\n      break;\n    case 6 /* Linked */:\n      const linked = node;\n      traverseNode(linked.key, transformer);\n      transformer.helper(\"linked\" /* LINKED */);\n      transformer.helper(\"type\" /* TYPE */);\n      break;\n    case 5 /* List */:\n      transformer.helper(\"interpolate\" /* INTERPOLATE */);\n      transformer.helper(\"list\" /* LIST */);\n      break;\n    case 4 /* Named */:\n      transformer.helper(\"interpolate\" /* INTERPOLATE */);\n      transformer.helper(\"named\" /* NAMED */);\n      break;\n  }\n  // TODO: if we need post-hook of transform, should be implemented to here\n}\n// transform AST\nfunction transform(ast, options = {} // eslint-disable-line\n) {\n  const transformer = createTransformer(ast);\n  transformer.helper(\"normalize\" /* NORMALIZE */);\n  // traverse\n  ast.body && traverseNode(ast.body, transformer);\n  // set meta information\n  const context = transformer.context();\n  ast.helpers = Array.from(context.helpers);\n}\nfunction createCodeGenerator(ast, options) {\n  const {\n    sourceMap,\n    filename,\n    breakLineCode,\n    needIndent: _needIndent\n  } = options;\n  const _context = {\n    source: ast.loc.source,\n    filename,\n    code: '',\n    column: 1,\n    line: 1,\n    offset: 0,\n    map: undefined,\n    breakLineCode,\n    needIndent: _needIndent,\n    indentLevel: 0\n  };\n  const context = () => _context;\n  function push(code, node) {\n    _context.code += code;\n  }\n  function _newline(n, withBreakLine = true) {\n    const _breakLineCode = withBreakLine ? breakLineCode : '';\n    push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\n  }\n  function indent(withNewLine = true) {\n    const level = ++_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function deindent(withNewLine = true) {\n    const level = --_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function newline() {\n    _newline(_context.indentLevel);\n  }\n  const helper = key => `_${key}`;\n  const needIndent = () => _context.needIndent;\n  return {\n    context,\n    push,\n    indent,\n    deindent,\n    newline,\n    helper,\n    needIndent\n  };\n}\nfunction generateLinkedNode(generator, node) {\n  const {\n    helper\n  } = generator;\n  generator.push(`${helper(\"linked\" /* LINKED */)}(`);\n  generateNode(generator, node.key);\n  if (node.modifier) {\n    generator.push(`, `);\n    generateNode(generator, node.modifier);\n    generator.push(`, _type`);\n  } else {\n    generator.push(`, undefined, _type`);\n  }\n  generator.push(`)`);\n}\nfunction generateMessageNode(generator, node) {\n  const {\n    helper,\n    needIndent\n  } = generator;\n  generator.push(`${helper(\"normalize\" /* NORMALIZE */)}([`);\n  generator.indent(needIndent());\n  const length = node.items.length;\n  for (let i = 0; i < length; i++) {\n    generateNode(generator, node.items[i]);\n    if (i === length - 1) {\n      break;\n    }\n    generator.push(', ');\n  }\n  generator.deindent(needIndent());\n  generator.push('])');\n}\nfunction generatePluralNode(generator, node) {\n  const {\n    helper,\n    needIndent\n  } = generator;\n  if (node.cases.length > 1) {\n    generator.push(`${helper(\"plural\" /* PLURAL */)}([`);\n    generator.indent(needIndent());\n    const length = node.cases.length;\n    for (let i = 0; i < length; i++) {\n      generateNode(generator, node.cases[i]);\n      if (i === length - 1) {\n        break;\n      }\n      generator.push(', ');\n    }\n    generator.deindent(needIndent());\n    generator.push(`])`);\n  }\n}\nfunction generateResource(generator, node) {\n  if (node.body) {\n    generateNode(generator, node.body);\n  } else {\n    generator.push('null');\n  }\n}\nfunction generateNode(generator, node) {\n  const {\n    helper\n  } = generator;\n  switch (node.type) {\n    case 0 /* Resource */:\n      generateResource(generator, node);\n      break;\n    case 1 /* Plural */:\n      generatePluralNode(generator, node);\n      break;\n    case 2 /* Message */:\n      generateMessageNode(generator, node);\n      break;\n    case 6 /* Linked */:\n      generateLinkedNode(generator, node);\n      break;\n    case 8 /* LinkedModifier */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 7 /* LinkedKey */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 5 /* List */:\n      generator.push(`${helper(\"interpolate\" /* INTERPOLATE */)}(${helper(\"list\" /* LIST */)}(${node.index}))`, node);\n      break;\n    case 4 /* Named */:\n      generator.push(`${helper(\"interpolate\" /* INTERPOLATE */)}(${helper(\"named\" /* NAMED */)}(${JSON.stringify(node.key)}))`, node);\n      break;\n    case 9 /* Literal */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 3 /* Text */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(`unhandled codegen node type: ${node.type}`);\n      }\n  }\n}\n// generate code from AST\nconst generate = (ast, options = {} // eslint-disable-line\n) => {\n  const mode = isString(options.mode) ? options.mode : 'normal';\n  const filename = isString(options.filename) ? options.filename : 'message.intl';\n  const sourceMap = !!options.sourceMap;\n  // prettier-ignore\n  const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === 'arrow' ? ';' : '\\n';\n  const needIndent = options.needIndent ? options.needIndent : mode !== 'arrow';\n  const helpers = ast.helpers || [];\n  const generator = createCodeGenerator(ast, {\n    mode,\n    filename,\n    sourceMap,\n    breakLineCode,\n    needIndent\n  });\n  generator.push(mode === 'normal' ? `function __msg__ (ctx) {` : `(ctx) => {`);\n  generator.indent(needIndent);\n  if (helpers.length > 0) {\n    generator.push(`const { ${helpers.map(s => `${s}: _${s}`).join(', ')} } = ctx`);\n    generator.newline();\n  }\n  generator.push(`return `);\n  generateNode(generator, ast);\n  generator.deindent(needIndent);\n  generator.push(`}`);\n  const {\n    code,\n    map\n  } = generator.context();\n  return {\n    ast,\n    code,\n    map: map ? map.toJSON() : undefined // eslint-disable-line @typescript-eslint/no-explicit-any\n  };\n};\n\nfunction baseCompile(source, options = {}) {\n  const assignedOptions = assign({}, options);\n  // parse source codes\n  const parser = createParser(assignedOptions);\n  const ast = parser.parse(source);\n  // transform ASTs\n  transform(ast, assignedOptions);\n  // generate javascript codes\n  return generate(ast, assignedOptions);\n}\nexport { CompileErrorCodes, ERROR_DOMAIN, LocationStub, baseCompile, createCompileError, createLocation, createParser, createPosition, defaultOnError, errorMessages };","map":{"version":3,"names":["format","assign","isString","CompileErrorCodes","EXPECTED_TOKEN","INVALID_TOKEN_IN_PLACEHOLDER","UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER","UNKNOWN_ESCAPE_SEQUENCE","INVALID_UNICODE_ESCAPE_SEQUENCE","UNBALANCED_CLOSING_BRACE","UNTERMINATED_CLOSING_BRACE","EMPTY_PLACEHOLDER","NOT_ALLOW_NEST_PLACEHOLDER","INVALID_LINKED_FORMAT","MUST_HAVE_MESSAGES_IN_PLURAL","UNEXPECTED_EMPTY_LINKED_MODIFIER","UNEXPECTED_EMPTY_LINKED_KEY","UNEXPECTED_LEXICAL_ANALYSIS","__EXTEND_POINT__","errorMessages","createCompileError","code","loc","options","domain","messages","args","msg","process","env","NODE_ENV","error","SyntaxError","String","location","defaultOnError","LocationStub","start","line","column","offset","end","createPosition","createLocation","source","CHAR_SP","CHAR_CR","CHAR_LF","CHAR_LS","fromCharCode","CHAR_PS","createScanner","str","_buf","_index","_line","_column","_peekOffset","isCRLF","index","isLF","isPS","isLS","isLineEnd","peekOffset","charAt","currentChar","currentPeek","next","peek","reset","resetPeek","skipToPeek","target","EOF","undefined","LITERAL_DELIMITER","ERROR_DOMAIN$1","createTokenizer","_scnr","currentOffset","currentPosition","_initLoc","_initOffset","_context","currentType","startLoc","endLoc","lastType","lastOffset","lastStartLoc","lastEndLoc","braceNest","inLinked","text","context","onError","emitError","pos","ctx","err","getToken","type","value","token","getEndToken","eat","scnr","ch","peekSpaces","buf","skipSpaces","isIdentifierStart","cc","charCodeAt","isNumberStart","isNamedIdentifierStart","ret","isListIdentifierStart","isLiteralStart","isLinkedDotStart","isLinkedModifierStart","isLinkedDelimiterStart","isLinkedReferStart","fn","isPluralStart","detectModuloStart","spaces","isModulo","hasSpace","length","isTextStart","prev","detectModulo","takeChar","takeIdentifierChar","closure","takeDigit","takeHexDigit","getDigits","num","readModulo","readText","readNamedIdentifier","name","readListIdentifier","readLiteral","literal","x","readEscapeSequence","current","readUnicodeEscapeSequence","unicode","digits","sequence","i","readInvalidIdentifier","identifiers","readLinkedModifier","readLinkedRefer","detect","readPlural","plural","readTokenInPlaceholder","readTokenInLinked","validNamedIdentifier","validListIdentifier","validLiteral","readToken","nextToken","ERROR_DOMAIN","KNOWN_ESCAPES","fromEscapeSequence","match","codePoint4","codePoint6","codePoint","parseInt","fromCodePoint","createParser","tokenzer","startNode","node","endNode","parseText","tokenizer","parseList","parseNamed","key","parseLiteral","replace","parseLinkedModifier","nextConsumeToken","getTokenCaption","parseLinkedKey","parseLinked","linkedNode","parsed","modifier","nextContext","emptyLinkedKeyNode","parseMessage","startOffset","items","push","endOffset","parsePlural","msgNode","hasEmptyMessage","cases","parseResource","parse","body","slice","createTransformer","ast","helpers","Set","helper","add","traverseNodes","nodes","transformer","traverseNode","linked","transform","Array","from","createCodeGenerator","sourceMap","filename","breakLineCode","needIndent","_needIndent","map","indentLevel","_newline","n","withBreakLine","_breakLineCode","repeat","indent","withNewLine","level","deindent","newline","generateLinkedNode","generator","generateNode","generateMessageNode","generatePluralNode","generateResource","JSON","stringify","Error","generate","mode","s","join","toJSON","baseCompile","assignedOptions","parser"],"sources":["/Users/emperinter/app/HTML/watermark-vue/node_modules/@intlify/message-compiler/dist/message-compiler.esm-bundler.js"],"sourcesContent":["/*!\n  * message-compiler v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nimport { format, assign, isString } from '@intlify/shared';\n\nconst CompileErrorCodes = {\r\n    // tokenizer error codes\r\n    EXPECTED_TOKEN: 1,\r\n    INVALID_TOKEN_IN_PLACEHOLDER: 2,\r\n    UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\r\n    UNKNOWN_ESCAPE_SEQUENCE: 4,\r\n    INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\r\n    UNBALANCED_CLOSING_BRACE: 6,\r\n    UNTERMINATED_CLOSING_BRACE: 7,\r\n    EMPTY_PLACEHOLDER: 8,\r\n    NOT_ALLOW_NEST_PLACEHOLDER: 9,\r\n    INVALID_LINKED_FORMAT: 10,\r\n    // parser error codes\r\n    MUST_HAVE_MESSAGES_IN_PLURAL: 11,\r\n    UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\r\n    UNEXPECTED_EMPTY_LINKED_KEY: 13,\r\n    UNEXPECTED_LEXICAL_ANALYSIS: 14,\r\n    // Special value for higher-order compilers to pick up the last code\r\n    // to avoid collision of error codes. This should always be kept as the last\r\n    // item.\r\n    __EXTEND_POINT__: 15\r\n};\r\n/** @internal */\r\nconst errorMessages = {\r\n    // tokenizer error messages\r\n    [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\r\n    [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\r\n    [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\r\n    [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\r\n    [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\r\n    [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\r\n    [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\r\n    [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\r\n    [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\r\n    [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\r\n    // parser error messages\r\n    [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\r\n    [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\r\n    [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\r\n    [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`\r\n};\r\nfunction createCompileError(code, loc, options = {}) {\r\n    const { domain, messages, args } = options;\r\n    const msg = (process.env.NODE_ENV !== 'production')\r\n        ? format((messages || errorMessages)[code] || '', ...(args || []))\r\n        : code;\r\n    const error = new SyntaxError(String(msg));\r\n    error.code = code;\r\n    if (loc) {\r\n        error.location = loc;\r\n    }\r\n    error.domain = domain;\r\n    return error;\r\n}\r\n/** @internal */\r\nfunction defaultOnError(error) {\r\n    throw error;\r\n}\n\nconst LocationStub = {\r\n    start: { line: 1, column: 1, offset: 0 },\r\n    end: { line: 1, column: 1, offset: 0 }\r\n};\r\nfunction createPosition(line, column, offset) {\r\n    return { line, column, offset };\r\n}\r\nfunction createLocation(start, end, source) {\r\n    const loc = { start, end };\r\n    if (source != null) {\r\n        loc.source = source;\r\n    }\r\n    return loc;\r\n}\n\nconst CHAR_SP = ' ';\r\nconst CHAR_CR = '\\r';\r\nconst CHAR_LF = '\\n';\r\nconst CHAR_LS = String.fromCharCode(0x2028);\r\nconst CHAR_PS = String.fromCharCode(0x2029);\r\nfunction createScanner(str) {\r\n    const _buf = str;\r\n    let _index = 0;\r\n    let _line = 1;\r\n    let _column = 1;\r\n    let _peekOffset = 0;\r\n    const isCRLF = (index) => _buf[index] === CHAR_CR && _buf[index + 1] === CHAR_LF;\r\n    const isLF = (index) => _buf[index] === CHAR_LF;\r\n    const isPS = (index) => _buf[index] === CHAR_PS;\r\n    const isLS = (index) => _buf[index] === CHAR_LS;\r\n    const isLineEnd = (index) => isCRLF(index) || isLF(index) || isPS(index) || isLS(index);\r\n    const index = () => _index;\r\n    const line = () => _line;\r\n    const column = () => _column;\r\n    const peekOffset = () => _peekOffset;\r\n    const charAt = (offset) => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\r\n    const currentChar = () => charAt(_index);\r\n    const currentPeek = () => charAt(_index + _peekOffset);\r\n    function next() {\r\n        _peekOffset = 0;\r\n        if (isLineEnd(_index)) {\r\n            _line++;\r\n            _column = 0;\r\n        }\r\n        if (isCRLF(_index)) {\r\n            _index++;\r\n        }\r\n        _index++;\r\n        _column++;\r\n        return _buf[_index];\r\n    }\r\n    function peek() {\r\n        if (isCRLF(_index + _peekOffset)) {\r\n            _peekOffset++;\r\n        }\r\n        _peekOffset++;\r\n        return _buf[_index + _peekOffset];\r\n    }\r\n    function reset() {\r\n        _index = 0;\r\n        _line = 1;\r\n        _column = 1;\r\n        _peekOffset = 0;\r\n    }\r\n    function resetPeek(offset = 0) {\r\n        _peekOffset = offset;\r\n    }\r\n    function skipToPeek() {\r\n        const target = _index + _peekOffset;\r\n        // eslint-disable-next-line no-unmodified-loop-condition\r\n        while (target !== _index) {\r\n            next();\r\n        }\r\n        _peekOffset = 0;\r\n    }\r\n    return {\r\n        index,\r\n        line,\r\n        column,\r\n        peekOffset,\r\n        charAt,\r\n        currentChar,\r\n        currentPeek,\r\n        next,\r\n        peek,\r\n        reset,\r\n        resetPeek,\r\n        skipToPeek\r\n    };\r\n}\n\nconst EOF = undefined;\r\nconst LITERAL_DELIMITER = \"'\";\r\nconst ERROR_DOMAIN$1 = 'tokenizer';\r\nfunction createTokenizer(source, options = {}) {\r\n    const location = options.location !== false;\r\n    const _scnr = createScanner(source);\r\n    const currentOffset = () => _scnr.index();\r\n    const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\r\n    const _initLoc = currentPosition();\r\n    const _initOffset = currentOffset();\r\n    const _context = {\r\n        currentType: 14 /* EOF */,\r\n        offset: _initOffset,\r\n        startLoc: _initLoc,\r\n        endLoc: _initLoc,\r\n        lastType: 14 /* EOF */,\r\n        lastOffset: _initOffset,\r\n        lastStartLoc: _initLoc,\r\n        lastEndLoc: _initLoc,\r\n        braceNest: 0,\r\n        inLinked: false,\r\n        text: ''\r\n    };\r\n    const context = () => _context;\r\n    const { onError } = options;\r\n    function emitError(code, pos, offset, ...args) {\r\n        const ctx = context();\r\n        pos.column += offset;\r\n        pos.offset += offset;\r\n        if (onError) {\r\n            const loc = createLocation(ctx.startLoc, pos);\r\n            const err = createCompileError(code, loc, {\r\n                domain: ERROR_DOMAIN$1,\r\n                args\r\n            });\r\n            onError(err);\r\n        }\r\n    }\r\n    function getToken(context, type, value) {\r\n        context.endLoc = currentPosition();\r\n        context.currentType = type;\r\n        const token = { type };\r\n        if (location) {\r\n            token.loc = createLocation(context.startLoc, context.endLoc);\r\n        }\r\n        if (value != null) {\r\n            token.value = value;\r\n        }\r\n        return token;\r\n    }\r\n    const getEndToken = (context) => getToken(context, 14 /* EOF */);\r\n    function eat(scnr, ch) {\r\n        if (scnr.currentChar() === ch) {\r\n            scnr.next();\r\n            return ch;\r\n        }\r\n        else {\r\n            emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\r\n            return '';\r\n        }\r\n    }\r\n    function peekSpaces(scnr) {\r\n        let buf = '';\r\n        while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\r\n            buf += scnr.currentPeek();\r\n            scnr.peek();\r\n        }\r\n        return buf;\r\n    }\r\n    function skipSpaces(scnr) {\r\n        const buf = peekSpaces(scnr);\r\n        scnr.skipToPeek();\r\n        return buf;\r\n    }\r\n    function isIdentifierStart(ch) {\r\n        if (ch === EOF) {\r\n            return false;\r\n        }\r\n        const cc = ch.charCodeAt(0);\r\n        return ((cc >= 97 && cc <= 122) || // a-z\r\n            (cc >= 65 && cc <= 90) || // A-Z\r\n            cc === 95 // _\r\n        );\r\n    }\r\n    function isNumberStart(ch) {\r\n        if (ch === EOF) {\r\n            return false;\r\n        }\r\n        const cc = ch.charCodeAt(0);\r\n        return cc >= 48 && cc <= 57; // 0-9\r\n    }\r\n    function isNamedIdentifierStart(scnr, context) {\r\n        const { currentType } = context;\r\n        if (currentType !== 2 /* BraceLeft */) {\r\n            return false;\r\n        }\r\n        peekSpaces(scnr);\r\n        const ret = isIdentifierStart(scnr.currentPeek());\r\n        scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function isListIdentifierStart(scnr, context) {\r\n        const { currentType } = context;\r\n        if (currentType !== 2 /* BraceLeft */) {\r\n            return false;\r\n        }\r\n        peekSpaces(scnr);\r\n        const ch = scnr.currentPeek() === '-' ? scnr.peek() : scnr.currentPeek();\r\n        const ret = isNumberStart(ch);\r\n        scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function isLiteralStart(scnr, context) {\r\n        const { currentType } = context;\r\n        if (currentType !== 2 /* BraceLeft */) {\r\n            return false;\r\n        }\r\n        peekSpaces(scnr);\r\n        const ret = scnr.currentPeek() === LITERAL_DELIMITER;\r\n        scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function isLinkedDotStart(scnr, context) {\r\n        const { currentType } = context;\r\n        if (currentType !== 8 /* LinkedAlias */) {\r\n            return false;\r\n        }\r\n        peekSpaces(scnr);\r\n        const ret = scnr.currentPeek() === \".\" /* LinkedDot */;\r\n        scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function isLinkedModifierStart(scnr, context) {\r\n        const { currentType } = context;\r\n        if (currentType !== 9 /* LinkedDot */) {\r\n            return false;\r\n        }\r\n        peekSpaces(scnr);\r\n        const ret = isIdentifierStart(scnr.currentPeek());\r\n        scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function isLinkedDelimiterStart(scnr, context) {\r\n        const { currentType } = context;\r\n        if (!(currentType === 8 /* LinkedAlias */ ||\r\n            currentType === 12 /* LinkedModifier */)) {\r\n            return false;\r\n        }\r\n        peekSpaces(scnr);\r\n        const ret = scnr.currentPeek() === \":\" /* LinkedDelimiter */;\r\n        scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function isLinkedReferStart(scnr, context) {\r\n        const { currentType } = context;\r\n        if (currentType !== 10 /* LinkedDelimiter */) {\r\n            return false;\r\n        }\r\n        const fn = () => {\r\n            const ch = scnr.currentPeek();\r\n            if (ch === \"{\" /* BraceLeft */) {\r\n                return isIdentifierStart(scnr.peek());\r\n            }\r\n            else if (ch === \"@\" /* LinkedAlias */ ||\r\n                ch === \"%\" /* Modulo */ ||\r\n                ch === \"|\" /* Pipe */ ||\r\n                ch === \":\" /* LinkedDelimiter */ ||\r\n                ch === \".\" /* LinkedDot */ ||\r\n                ch === CHAR_SP ||\r\n                !ch) {\r\n                return false;\r\n            }\r\n            else if (ch === CHAR_LF) {\r\n                scnr.peek();\r\n                return fn();\r\n            }\r\n            else {\r\n                // other characters\r\n                return isIdentifierStart(ch);\r\n            }\r\n        };\r\n        const ret = fn();\r\n        scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function isPluralStart(scnr) {\r\n        peekSpaces(scnr);\r\n        const ret = scnr.currentPeek() === \"|\" /* Pipe */;\r\n        scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function detectModuloStart(scnr) {\r\n        const spaces = peekSpaces(scnr);\r\n        const ret = scnr.currentPeek() === \"%\" /* Modulo */ &&\r\n            scnr.peek() === \"{\" /* BraceLeft */;\r\n        scnr.resetPeek();\r\n        return {\r\n            isModulo: ret,\r\n            hasSpace: spaces.length > 0\r\n        };\r\n    }\r\n    function isTextStart(scnr, reset = true) {\r\n        const fn = (hasSpace = false, prev = '', detectModulo = false) => {\r\n            const ch = scnr.currentPeek();\r\n            if (ch === \"{\" /* BraceLeft */) {\r\n                return prev === \"%\" /* Modulo */ ? false : hasSpace;\r\n            }\r\n            else if (ch === \"@\" /* LinkedAlias */ || !ch) {\r\n                return prev === \"%\" /* Modulo */ ? true : hasSpace;\r\n            }\r\n            else if (ch === \"%\" /* Modulo */) {\r\n                scnr.peek();\r\n                return fn(hasSpace, \"%\" /* Modulo */, true);\r\n            }\r\n            else if (ch === \"|\" /* Pipe */) {\r\n                return prev === \"%\" /* Modulo */ || detectModulo\r\n                    ? true\r\n                    : !(prev === CHAR_SP || prev === CHAR_LF);\r\n            }\r\n            else if (ch === CHAR_SP) {\r\n                scnr.peek();\r\n                return fn(true, CHAR_SP, detectModulo);\r\n            }\r\n            else if (ch === CHAR_LF) {\r\n                scnr.peek();\r\n                return fn(true, CHAR_LF, detectModulo);\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        };\r\n        const ret = fn();\r\n        reset && scnr.resetPeek();\r\n        return ret;\r\n    }\r\n    function takeChar(scnr, fn) {\r\n        const ch = scnr.currentChar();\r\n        if (ch === EOF) {\r\n            return EOF;\r\n        }\r\n        if (fn(ch)) {\r\n            scnr.next();\r\n            return ch;\r\n        }\r\n        return null;\r\n    }\r\n    function takeIdentifierChar(scnr) {\r\n        const closure = (ch) => {\r\n            const cc = ch.charCodeAt(0);\r\n            return ((cc >= 97 && cc <= 122) || // a-z\r\n                (cc >= 65 && cc <= 90) || // A-Z\r\n                (cc >= 48 && cc <= 57) || // 0-9\r\n                cc === 95 || // _\r\n                cc === 36 // $\r\n            );\r\n        };\r\n        return takeChar(scnr, closure);\r\n    }\r\n    function takeDigit(scnr) {\r\n        const closure = (ch) => {\r\n            const cc = ch.charCodeAt(0);\r\n            return cc >= 48 && cc <= 57; // 0-9\r\n        };\r\n        return takeChar(scnr, closure);\r\n    }\r\n    function takeHexDigit(scnr) {\r\n        const closure = (ch) => {\r\n            const cc = ch.charCodeAt(0);\r\n            return ((cc >= 48 && cc <= 57) || // 0-9\r\n                (cc >= 65 && cc <= 70) || // A-F\r\n                (cc >= 97 && cc <= 102)); // a-f\r\n        };\r\n        return takeChar(scnr, closure);\r\n    }\r\n    function getDigits(scnr) {\r\n        let ch = '';\r\n        let num = '';\r\n        while ((ch = takeDigit(scnr))) {\r\n            num += ch;\r\n        }\r\n        return num;\r\n    }\r\n    function readModulo(scnr) {\r\n        skipSpaces(scnr);\r\n        const ch = scnr.currentChar();\r\n        if (ch !== \"%\" /* Modulo */) {\r\n            emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\r\n        }\r\n        scnr.next();\r\n        return \"%\" /* Modulo */;\r\n    }\r\n    function readText(scnr) {\r\n        let buf = '';\r\n        while (true) {\r\n            const ch = scnr.currentChar();\r\n            if (ch === \"{\" /* BraceLeft */ ||\r\n                ch === \"}\" /* BraceRight */ ||\r\n                ch === \"@\" /* LinkedAlias */ ||\r\n                ch === \"|\" /* Pipe */ ||\r\n                !ch) {\r\n                break;\r\n            }\r\n            else if (ch === \"%\" /* Modulo */) {\r\n                if (isTextStart(scnr)) {\r\n                    buf += ch;\r\n                    scnr.next();\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else if (ch === CHAR_SP || ch === CHAR_LF) {\r\n                if (isTextStart(scnr)) {\r\n                    buf += ch;\r\n                    scnr.next();\r\n                }\r\n                else if (isPluralStart(scnr)) {\r\n                    break;\r\n                }\r\n                else {\r\n                    buf += ch;\r\n                    scnr.next();\r\n                }\r\n            }\r\n            else {\r\n                buf += ch;\r\n                scnr.next();\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n    function readNamedIdentifier(scnr) {\r\n        skipSpaces(scnr);\r\n        let ch = '';\r\n        let name = '';\r\n        while ((ch = takeIdentifierChar(scnr))) {\r\n            name += ch;\r\n        }\r\n        if (scnr.currentChar() === EOF) {\r\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\r\n        }\r\n        return name;\r\n    }\r\n    function readListIdentifier(scnr) {\r\n        skipSpaces(scnr);\r\n        let value = '';\r\n        if (scnr.currentChar() === '-') {\r\n            scnr.next();\r\n            value += `-${getDigits(scnr)}`;\r\n        }\r\n        else {\r\n            value += getDigits(scnr);\r\n        }\r\n        if (scnr.currentChar() === EOF) {\r\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\r\n        }\r\n        return value;\r\n    }\r\n    function readLiteral(scnr) {\r\n        skipSpaces(scnr);\r\n        eat(scnr, `\\'`);\r\n        let ch = '';\r\n        let literal = '';\r\n        const fn = (x) => x !== LITERAL_DELIMITER && x !== CHAR_LF;\r\n        while ((ch = takeChar(scnr, fn))) {\r\n            if (ch === '\\\\') {\r\n                literal += readEscapeSequence(scnr);\r\n            }\r\n            else {\r\n                literal += ch;\r\n            }\r\n        }\r\n        const current = scnr.currentChar();\r\n        if (current === CHAR_LF || current === EOF) {\r\n            emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\r\n            // TODO: Is it correct really?\r\n            if (current === CHAR_LF) {\r\n                scnr.next();\r\n                eat(scnr, `\\'`);\r\n            }\r\n            return literal;\r\n        }\r\n        eat(scnr, `\\'`);\r\n        return literal;\r\n    }\r\n    function readEscapeSequence(scnr) {\r\n        const ch = scnr.currentChar();\r\n        switch (ch) {\r\n            case '\\\\':\r\n            case `\\'`:\r\n                scnr.next();\r\n                return `\\\\${ch}`;\r\n            case 'u':\r\n                return readUnicodeEscapeSequence(scnr, ch, 4);\r\n            case 'U':\r\n                return readUnicodeEscapeSequence(scnr, ch, 6);\r\n            default:\r\n                emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\r\n                return '';\r\n        }\r\n    }\r\n    function readUnicodeEscapeSequence(scnr, unicode, digits) {\r\n        eat(scnr, unicode);\r\n        let sequence = '';\r\n        for (let i = 0; i < digits; i++) {\r\n            const ch = takeHexDigit(scnr);\r\n            if (!ch) {\r\n                emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\r\n                break;\r\n            }\r\n            sequence += ch;\r\n        }\r\n        return `\\\\${unicode}${sequence}`;\r\n    }\r\n    function readInvalidIdentifier(scnr) {\r\n        skipSpaces(scnr);\r\n        let ch = '';\r\n        let identifiers = '';\r\n        const closure = (ch) => ch !== \"{\" /* BraceLeft */ &&\r\n            ch !== \"}\" /* BraceRight */ &&\r\n            ch !== CHAR_SP &&\r\n            ch !== CHAR_LF;\r\n        while ((ch = takeChar(scnr, closure))) {\r\n            identifiers += ch;\r\n        }\r\n        return identifiers;\r\n    }\r\n    function readLinkedModifier(scnr) {\r\n        let ch = '';\r\n        let name = '';\r\n        while ((ch = takeIdentifierChar(scnr))) {\r\n            name += ch;\r\n        }\r\n        return name;\r\n    }\r\n    function readLinkedRefer(scnr) {\r\n        const fn = (detect = false, buf) => {\r\n            const ch = scnr.currentChar();\r\n            if (ch === \"{\" /* BraceLeft */ ||\r\n                ch === \"%\" /* Modulo */ ||\r\n                ch === \"@\" /* LinkedAlias */ ||\r\n                ch === \"|\" /* Pipe */ ||\r\n                !ch) {\r\n                return buf;\r\n            }\r\n            else if (ch === CHAR_SP) {\r\n                return buf;\r\n            }\r\n            else if (ch === CHAR_LF) {\r\n                buf += ch;\r\n                scnr.next();\r\n                return fn(detect, buf);\r\n            }\r\n            else {\r\n                buf += ch;\r\n                scnr.next();\r\n                return fn(true, buf);\r\n            }\r\n        };\r\n        return fn(false, '');\r\n    }\r\n    function readPlural(scnr) {\r\n        skipSpaces(scnr);\r\n        const plural = eat(scnr, \"|\" /* Pipe */);\r\n        skipSpaces(scnr);\r\n        return plural;\r\n    }\r\n    // TODO: We need refactoring of token parsing ...\r\n    function readTokenInPlaceholder(scnr, context) {\r\n        let token = null;\r\n        const ch = scnr.currentChar();\r\n        switch (ch) {\r\n            case \"{\" /* BraceLeft */:\r\n                if (context.braceNest >= 1) {\r\n                    emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\r\n                }\r\n                scnr.next();\r\n                token = getToken(context, 2 /* BraceLeft */, \"{\" /* BraceLeft */);\r\n                skipSpaces(scnr);\r\n                context.braceNest++;\r\n                return token;\r\n            case \"}\" /* BraceRight */:\r\n                if (context.braceNest > 0 &&\r\n                    context.currentType === 2 /* BraceLeft */) {\r\n                    emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\r\n                }\r\n                scnr.next();\r\n                token = getToken(context, 3 /* BraceRight */, \"}\" /* BraceRight */);\r\n                context.braceNest--;\r\n                context.braceNest > 0 && skipSpaces(scnr);\r\n                if (context.inLinked && context.braceNest === 0) {\r\n                    context.inLinked = false;\r\n                }\r\n                return token;\r\n            case \"@\" /* LinkedAlias */:\r\n                if (context.braceNest > 0) {\r\n                    emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\r\n                }\r\n                token = readTokenInLinked(scnr, context) || getEndToken(context);\r\n                context.braceNest = 0;\r\n                return token;\r\n            default:\r\n                let validNamedIdentifier = true;\r\n                let validListIdentifier = true;\r\n                let validLiteral = true;\r\n                if (isPluralStart(scnr)) {\r\n                    if (context.braceNest > 0) {\r\n                        emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\r\n                    }\r\n                    token = getToken(context, 1 /* Pipe */, readPlural(scnr));\r\n                    // reset\r\n                    context.braceNest = 0;\r\n                    context.inLinked = false;\r\n                    return token;\r\n                }\r\n                if (context.braceNest > 0 &&\r\n                    (context.currentType === 5 /* Named */ ||\r\n                        context.currentType === 6 /* List */ ||\r\n                        context.currentType === 7 /* Literal */)) {\r\n                    emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\r\n                    context.braceNest = 0;\r\n                    return readToken(scnr, context);\r\n                }\r\n                if ((validNamedIdentifier = isNamedIdentifierStart(scnr, context))) {\r\n                    token = getToken(context, 5 /* Named */, readNamedIdentifier(scnr));\r\n                    skipSpaces(scnr);\r\n                    return token;\r\n                }\r\n                if ((validListIdentifier = isListIdentifierStart(scnr, context))) {\r\n                    token = getToken(context, 6 /* List */, readListIdentifier(scnr));\r\n                    skipSpaces(scnr);\r\n                    return token;\r\n                }\r\n                if ((validLiteral = isLiteralStart(scnr, context))) {\r\n                    token = getToken(context, 7 /* Literal */, readLiteral(scnr));\r\n                    skipSpaces(scnr);\r\n                    return token;\r\n                }\r\n                if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\r\n                    // TODO: we should be re-designed invalid cases, when we will extend message syntax near the future ...\r\n                    token = getToken(context, 13 /* InvalidPlace */, readInvalidIdentifier(scnr));\r\n                    emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\r\n                    skipSpaces(scnr);\r\n                    return token;\r\n                }\r\n                break;\r\n        }\r\n        return token;\r\n    }\r\n    // TODO: We need refactoring of token parsing ...\r\n    function readTokenInLinked(scnr, context) {\r\n        const { currentType } = context;\r\n        let token = null;\r\n        const ch = scnr.currentChar();\r\n        if ((currentType === 8 /* LinkedAlias */ ||\r\n            currentType === 9 /* LinkedDot */ ||\r\n            currentType === 12 /* LinkedModifier */ ||\r\n            currentType === 10 /* LinkedDelimiter */) &&\r\n            (ch === CHAR_LF || ch === CHAR_SP)) {\r\n            emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\r\n        }\r\n        switch (ch) {\r\n            case \"@\" /* LinkedAlias */:\r\n                scnr.next();\r\n                token = getToken(context, 8 /* LinkedAlias */, \"@\" /* LinkedAlias */);\r\n                context.inLinked = true;\r\n                return token;\r\n            case \".\" /* LinkedDot */:\r\n                skipSpaces(scnr);\r\n                scnr.next();\r\n                return getToken(context, 9 /* LinkedDot */, \".\" /* LinkedDot */);\r\n            case \":\" /* LinkedDelimiter */:\r\n                skipSpaces(scnr);\r\n                scnr.next();\r\n                return getToken(context, 10 /* LinkedDelimiter */, \":\" /* LinkedDelimiter */);\r\n            default:\r\n                if (isPluralStart(scnr)) {\r\n                    token = getToken(context, 1 /* Pipe */, readPlural(scnr));\r\n                    // reset\r\n                    context.braceNest = 0;\r\n                    context.inLinked = false;\r\n                    return token;\r\n                }\r\n                if (isLinkedDotStart(scnr, context) ||\r\n                    isLinkedDelimiterStart(scnr, context)) {\r\n                    skipSpaces(scnr);\r\n                    return readTokenInLinked(scnr, context);\r\n                }\r\n                if (isLinkedModifierStart(scnr, context)) {\r\n                    skipSpaces(scnr);\r\n                    return getToken(context, 12 /* LinkedModifier */, readLinkedModifier(scnr));\r\n                }\r\n                if (isLinkedReferStart(scnr, context)) {\r\n                    skipSpaces(scnr);\r\n                    if (ch === \"{\" /* BraceLeft */) {\r\n                        // scan the placeholder\r\n                        return readTokenInPlaceholder(scnr, context) || token;\r\n                    }\r\n                    else {\r\n                        return getToken(context, 11 /* LinkedKey */, readLinkedRefer(scnr));\r\n                    }\r\n                }\r\n                if (currentType === 8 /* LinkedAlias */) {\r\n                    emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\r\n                }\r\n                context.braceNest = 0;\r\n                context.inLinked = false;\r\n                return readToken(scnr, context);\r\n        }\r\n    }\r\n    // TODO: We need refactoring of token parsing ...\r\n    function readToken(scnr, context) {\r\n        let token = { type: 14 /* EOF */ };\r\n        if (context.braceNest > 0) {\r\n            return readTokenInPlaceholder(scnr, context) || getEndToken(context);\r\n        }\r\n        if (context.inLinked) {\r\n            return readTokenInLinked(scnr, context) || getEndToken(context);\r\n        }\r\n        const ch = scnr.currentChar();\r\n        switch (ch) {\r\n            case \"{\" /* BraceLeft */:\r\n                return readTokenInPlaceholder(scnr, context) || getEndToken(context);\r\n            case \"}\" /* BraceRight */:\r\n                emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\r\n                scnr.next();\r\n                return getToken(context, 3 /* BraceRight */, \"}\" /* BraceRight */);\r\n            case \"@\" /* LinkedAlias */:\r\n                return readTokenInLinked(scnr, context) || getEndToken(context);\r\n            default:\r\n                if (isPluralStart(scnr)) {\r\n                    token = getToken(context, 1 /* Pipe */, readPlural(scnr));\r\n                    // reset\r\n                    context.braceNest = 0;\r\n                    context.inLinked = false;\r\n                    return token;\r\n                }\r\n                const { isModulo, hasSpace } = detectModuloStart(scnr);\r\n                if (isModulo) {\r\n                    return hasSpace\r\n                        ? getToken(context, 0 /* Text */, readText(scnr))\r\n                        : getToken(context, 4 /* Modulo */, readModulo(scnr));\r\n                }\r\n                if (isTextStart(scnr)) {\r\n                    return getToken(context, 0 /* Text */, readText(scnr));\r\n                }\r\n                break;\r\n        }\r\n        return token;\r\n    }\r\n    function nextToken() {\r\n        const { currentType, offset, startLoc, endLoc } = _context;\r\n        _context.lastType = currentType;\r\n        _context.lastOffset = offset;\r\n        _context.lastStartLoc = startLoc;\r\n        _context.lastEndLoc = endLoc;\r\n        _context.offset = currentOffset();\r\n        _context.startLoc = currentPosition();\r\n        if (_scnr.currentChar() === EOF) {\r\n            return getToken(_context, 14 /* EOF */);\r\n        }\r\n        return readToken(_scnr, _context);\r\n    }\r\n    return {\r\n        nextToken,\r\n        currentOffset,\r\n        currentPosition,\r\n        context\r\n    };\r\n}\n\nconst ERROR_DOMAIN = 'parser';\r\n// Backslash backslash, backslash quote, uHHHH, UHHHHHH.\r\nconst KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\r\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\r\n    switch (match) {\r\n        case `\\\\\\\\`:\r\n            return `\\\\`;\r\n        case `\\\\\\'`:\r\n            return `\\'`;\r\n        default: {\r\n            const codePoint = parseInt(codePoint4 || codePoint6, 16);\r\n            if (codePoint <= 0xd7ff || codePoint >= 0xe000) {\r\n                return String.fromCodePoint(codePoint);\r\n            }\r\n            // invalid ...\r\n            // Replace them with U+FFFD REPLACEMENT CHARACTER.\r\n            return '�';\r\n        }\r\n    }\r\n}\r\nfunction createParser(options = {}) {\r\n    const location = options.location !== false;\r\n    const { onError } = options;\r\n    function emitError(tokenzer, code, start, offset, ...args) {\r\n        const end = tokenzer.currentPosition();\r\n        end.offset += offset;\r\n        end.column += offset;\r\n        if (onError) {\r\n            const loc = createLocation(start, end);\r\n            const err = createCompileError(code, loc, {\r\n                domain: ERROR_DOMAIN,\r\n                args\r\n            });\r\n            onError(err);\r\n        }\r\n    }\r\n    function startNode(type, offset, loc) {\r\n        const node = {\r\n            type,\r\n            start: offset,\r\n            end: offset\r\n        };\r\n        if (location) {\r\n            node.loc = { start: loc, end: loc };\r\n        }\r\n        return node;\r\n    }\r\n    function endNode(node, offset, pos, type) {\r\n        node.end = offset;\r\n        if (type) {\r\n            node.type = type;\r\n        }\r\n        if (location && node.loc) {\r\n            node.loc.end = pos;\r\n        }\r\n    }\r\n    function parseText(tokenizer, value) {\r\n        const context = tokenizer.context();\r\n        const node = startNode(3 /* Text */, context.offset, context.startLoc);\r\n        node.value = value;\r\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return node;\r\n    }\r\n    function parseList(tokenizer, index) {\r\n        const context = tokenizer.context();\r\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\r\n        const node = startNode(5 /* List */, offset, loc);\r\n        node.index = parseInt(index, 10);\r\n        tokenizer.nextToken(); // skip brach right\r\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return node;\r\n    }\r\n    function parseNamed(tokenizer, key) {\r\n        const context = tokenizer.context();\r\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\r\n        const node = startNode(4 /* Named */, offset, loc);\r\n        node.key = key;\r\n        tokenizer.nextToken(); // skip brach right\r\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return node;\r\n    }\r\n    function parseLiteral(tokenizer, value) {\r\n        const context = tokenizer.context();\r\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\r\n        const node = startNode(9 /* Literal */, offset, loc);\r\n        node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\r\n        tokenizer.nextToken(); // skip brach right\r\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return node;\r\n    }\r\n    function parseLinkedModifier(tokenizer) {\r\n        const token = tokenizer.nextToken();\r\n        const context = tokenizer.context();\r\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get linked dot loc\r\n        const node = startNode(8 /* LinkedModifier */, offset, loc);\r\n        if (token.type !== 12 /* LinkedModifier */) {\r\n            // empty modifier\r\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\r\n            node.value = '';\r\n            endNode(node, offset, loc);\r\n            return {\r\n                nextConsumeToken: token,\r\n                node\r\n            };\r\n        }\r\n        // check token\r\n        if (token.value == null) {\r\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n        }\r\n        node.value = token.value || '';\r\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return {\r\n            node\r\n        };\r\n    }\r\n    function parseLinkedKey(tokenizer, value) {\r\n        const context = tokenizer.context();\r\n        const node = startNode(7 /* LinkedKey */, context.offset, context.startLoc);\r\n        node.value = value;\r\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return node;\r\n    }\r\n    function parseLinked(tokenizer) {\r\n        const context = tokenizer.context();\r\n        const linkedNode = startNode(6 /* Linked */, context.offset, context.startLoc);\r\n        let token = tokenizer.nextToken();\r\n        if (token.type === 9 /* LinkedDot */) {\r\n            const parsed = parseLinkedModifier(tokenizer);\r\n            linkedNode.modifier = parsed.node;\r\n            token = parsed.nextConsumeToken || tokenizer.nextToken();\r\n        }\r\n        // asset check token\r\n        if (token.type !== 10 /* LinkedDelimiter */) {\r\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n        }\r\n        token = tokenizer.nextToken();\r\n        // skip brace left\r\n        if (token.type === 2 /* BraceLeft */) {\r\n            token = tokenizer.nextToken();\r\n        }\r\n        switch (token.type) {\r\n            case 11 /* LinkedKey */:\r\n                if (token.value == null) {\r\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n                }\r\n                linkedNode.key = parseLinkedKey(tokenizer, token.value || '');\r\n                break;\r\n            case 5 /* Named */:\r\n                if (token.value == null) {\r\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n                }\r\n                linkedNode.key = parseNamed(tokenizer, token.value || '');\r\n                break;\r\n            case 6 /* List */:\r\n                if (token.value == null) {\r\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n                }\r\n                linkedNode.key = parseList(tokenizer, token.value || '');\r\n                break;\r\n            case 7 /* Literal */:\r\n                if (token.value == null) {\r\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n                }\r\n                linkedNode.key = parseLiteral(tokenizer, token.value || '');\r\n                break;\r\n            default:\r\n                // empty key\r\n                emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\r\n                const nextContext = tokenizer.context();\r\n                const emptyLinkedKeyNode = startNode(7 /* LinkedKey */, nextContext.offset, nextContext.startLoc);\r\n                emptyLinkedKeyNode.value = '';\r\n                endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\r\n                linkedNode.key = emptyLinkedKeyNode;\r\n                endNode(linkedNode, nextContext.offset, nextContext.startLoc);\r\n                return {\r\n                    nextConsumeToken: token,\r\n                    node: linkedNode\r\n                };\r\n        }\r\n        endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return {\r\n            node: linkedNode\r\n        };\r\n    }\r\n    function parseMessage(tokenizer) {\r\n        const context = tokenizer.context();\r\n        const startOffset = context.currentType === 1 /* Pipe */\r\n            ? tokenizer.currentOffset()\r\n            : context.offset;\r\n        const startLoc = context.currentType === 1 /* Pipe */\r\n            ? context.endLoc\r\n            : context.startLoc;\r\n        const node = startNode(2 /* Message */, startOffset, startLoc);\r\n        node.items = [];\r\n        let nextToken = null;\r\n        do {\r\n            const token = nextToken || tokenizer.nextToken();\r\n            nextToken = null;\r\n            switch (token.type) {\r\n                case 0 /* Text */:\r\n                    if (token.value == null) {\r\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n                    }\r\n                    node.items.push(parseText(tokenizer, token.value || ''));\r\n                    break;\r\n                case 6 /* List */:\r\n                    if (token.value == null) {\r\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n                    }\r\n                    node.items.push(parseList(tokenizer, token.value || ''));\r\n                    break;\r\n                case 5 /* Named */:\r\n                    if (token.value == null) {\r\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n                    }\r\n                    node.items.push(parseNamed(tokenizer, token.value || ''));\r\n                    break;\r\n                case 7 /* Literal */:\r\n                    if (token.value == null) {\r\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\r\n                    }\r\n                    node.items.push(parseLiteral(tokenizer, token.value || ''));\r\n                    break;\r\n                case 8 /* LinkedAlias */:\r\n                    const parsed = parseLinked(tokenizer);\r\n                    node.items.push(parsed.node);\r\n                    nextToken = parsed.nextConsumeToken || null;\r\n                    break;\r\n            }\r\n        } while (context.currentType !== 14 /* EOF */ &&\r\n            context.currentType !== 1 /* Pipe */);\r\n        // adjust message node loc\r\n        const endOffset = context.currentType === 1 /* Pipe */\r\n            ? context.lastOffset\r\n            : tokenizer.currentOffset();\r\n        const endLoc = context.currentType === 1 /* Pipe */\r\n            ? context.lastEndLoc\r\n            : tokenizer.currentPosition();\r\n        endNode(node, endOffset, endLoc);\r\n        return node;\r\n    }\r\n    function parsePlural(tokenizer, offset, loc, msgNode) {\r\n        const context = tokenizer.context();\r\n        let hasEmptyMessage = msgNode.items.length === 0;\r\n        const node = startNode(1 /* Plural */, offset, loc);\r\n        node.cases = [];\r\n        node.cases.push(msgNode);\r\n        do {\r\n            const msg = parseMessage(tokenizer);\r\n            if (!hasEmptyMessage) {\r\n                hasEmptyMessage = msg.items.length === 0;\r\n            }\r\n            node.cases.push(msg);\r\n        } while (context.currentType !== 14 /* EOF */);\r\n        if (hasEmptyMessage) {\r\n            emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\r\n        }\r\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return node;\r\n    }\r\n    function parseResource(tokenizer) {\r\n        const context = tokenizer.context();\r\n        const { offset, startLoc } = context;\r\n        const msgNode = parseMessage(tokenizer);\r\n        if (context.currentType === 14 /* EOF */) {\r\n            return msgNode;\r\n        }\r\n        else {\r\n            return parsePlural(tokenizer, offset, startLoc, msgNode);\r\n        }\r\n    }\r\n    function parse(source) {\r\n        const tokenizer = createTokenizer(source, assign({}, options));\r\n        const context = tokenizer.context();\r\n        const node = startNode(0 /* Resource */, context.offset, context.startLoc);\r\n        if (location && node.loc) {\r\n            node.loc.source = source;\r\n        }\r\n        node.body = parseResource(tokenizer);\r\n        // assert whether achieved to EOF\r\n        if (context.currentType !== 14 /* EOF */) {\r\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || '');\r\n        }\r\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\r\n        return node;\r\n    }\r\n    return { parse };\r\n}\r\nfunction getTokenCaption(token) {\r\n    if (token.type === 14 /* EOF */) {\r\n        return 'EOF';\r\n    }\r\n    const name = (token.value || '').replace(/\\r?\\n/gu, '\\\\n');\r\n    return name.length > 10 ? name.slice(0, 9) + '…' : name;\r\n}\n\nfunction createTransformer(ast, options = {} // eslint-disable-line\r\n) {\r\n    const _context = {\r\n        ast,\r\n        helpers: new Set()\r\n    };\r\n    const context = () => _context;\r\n    const helper = (name) => {\r\n        _context.helpers.add(name);\r\n        return name;\r\n    };\r\n    return { context, helper };\r\n}\r\nfunction traverseNodes(nodes, transformer) {\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        traverseNode(nodes[i], transformer);\r\n    }\r\n}\r\nfunction traverseNode(node, transformer) {\r\n    // TODO: if we need pre-hook of transform, should be implemented to here\r\n    switch (node.type) {\r\n        case 1 /* Plural */:\r\n            traverseNodes(node.cases, transformer);\r\n            transformer.helper(\"plural\" /* PLURAL */);\r\n            break;\r\n        case 2 /* Message */:\r\n            traverseNodes(node.items, transformer);\r\n            break;\r\n        case 6 /* Linked */:\r\n            const linked = node;\r\n            traverseNode(linked.key, transformer);\r\n            transformer.helper(\"linked\" /* LINKED */);\r\n            transformer.helper(\"type\" /* TYPE */);\r\n            break;\r\n        case 5 /* List */:\r\n            transformer.helper(\"interpolate\" /* INTERPOLATE */);\r\n            transformer.helper(\"list\" /* LIST */);\r\n            break;\r\n        case 4 /* Named */:\r\n            transformer.helper(\"interpolate\" /* INTERPOLATE */);\r\n            transformer.helper(\"named\" /* NAMED */);\r\n            break;\r\n    }\r\n    // TODO: if we need post-hook of transform, should be implemented to here\r\n}\r\n// transform AST\r\nfunction transform(ast, options = {} // eslint-disable-line\r\n) {\r\n    const transformer = createTransformer(ast);\r\n    transformer.helper(\"normalize\" /* NORMALIZE */);\r\n    // traverse\r\n    ast.body && traverseNode(ast.body, transformer);\r\n    // set meta information\r\n    const context = transformer.context();\r\n    ast.helpers = Array.from(context.helpers);\r\n}\n\nfunction createCodeGenerator(ast, options) {\r\n    const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;\r\n    const _context = {\r\n        source: ast.loc.source,\r\n        filename,\r\n        code: '',\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        map: undefined,\r\n        breakLineCode,\r\n        needIndent: _needIndent,\r\n        indentLevel: 0\r\n    };\r\n    const context = () => _context;\r\n    function push(code, node) {\r\n        _context.code += code;\r\n    }\r\n    function _newline(n, withBreakLine = true) {\r\n        const _breakLineCode = withBreakLine ? breakLineCode : '';\r\n        push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\r\n    }\r\n    function indent(withNewLine = true) {\r\n        const level = ++_context.indentLevel;\r\n        withNewLine && _newline(level);\r\n    }\r\n    function deindent(withNewLine = true) {\r\n        const level = --_context.indentLevel;\r\n        withNewLine && _newline(level);\r\n    }\r\n    function newline() {\r\n        _newline(_context.indentLevel);\r\n    }\r\n    const helper = (key) => `_${key}`;\r\n    const needIndent = () => _context.needIndent;\r\n    return {\r\n        context,\r\n        push,\r\n        indent,\r\n        deindent,\r\n        newline,\r\n        helper,\r\n        needIndent\r\n    };\r\n}\r\nfunction generateLinkedNode(generator, node) {\r\n    const { helper } = generator;\r\n    generator.push(`${helper(\"linked\" /* LINKED */)}(`);\r\n    generateNode(generator, node.key);\r\n    if (node.modifier) {\r\n        generator.push(`, `);\r\n        generateNode(generator, node.modifier);\r\n        generator.push(`, _type`);\r\n    }\r\n    else {\r\n        generator.push(`, undefined, _type`);\r\n    }\r\n    generator.push(`)`);\r\n}\r\nfunction generateMessageNode(generator, node) {\r\n    const { helper, needIndent } = generator;\r\n    generator.push(`${helper(\"normalize\" /* NORMALIZE */)}([`);\r\n    generator.indent(needIndent());\r\n    const length = node.items.length;\r\n    for (let i = 0; i < length; i++) {\r\n        generateNode(generator, node.items[i]);\r\n        if (i === length - 1) {\r\n            break;\r\n        }\r\n        generator.push(', ');\r\n    }\r\n    generator.deindent(needIndent());\r\n    generator.push('])');\r\n}\r\nfunction generatePluralNode(generator, node) {\r\n    const { helper, needIndent } = generator;\r\n    if (node.cases.length > 1) {\r\n        generator.push(`${helper(\"plural\" /* PLURAL */)}([`);\r\n        generator.indent(needIndent());\r\n        const length = node.cases.length;\r\n        for (let i = 0; i < length; i++) {\r\n            generateNode(generator, node.cases[i]);\r\n            if (i === length - 1) {\r\n                break;\r\n            }\r\n            generator.push(', ');\r\n        }\r\n        generator.deindent(needIndent());\r\n        generator.push(`])`);\r\n    }\r\n}\r\nfunction generateResource(generator, node) {\r\n    if (node.body) {\r\n        generateNode(generator, node.body);\r\n    }\r\n    else {\r\n        generator.push('null');\r\n    }\r\n}\r\nfunction generateNode(generator, node) {\r\n    const { helper } = generator;\r\n    switch (node.type) {\r\n        case 0 /* Resource */:\r\n            generateResource(generator, node);\r\n            break;\r\n        case 1 /* Plural */:\r\n            generatePluralNode(generator, node);\r\n            break;\r\n        case 2 /* Message */:\r\n            generateMessageNode(generator, node);\r\n            break;\r\n        case 6 /* Linked */:\r\n            generateLinkedNode(generator, node);\r\n            break;\r\n        case 8 /* LinkedModifier */:\r\n            generator.push(JSON.stringify(node.value), node);\r\n            break;\r\n        case 7 /* LinkedKey */:\r\n            generator.push(JSON.stringify(node.value), node);\r\n            break;\r\n        case 5 /* List */:\r\n            generator.push(`${helper(\"interpolate\" /* INTERPOLATE */)}(${helper(\"list\" /* LIST */)}(${node.index}))`, node);\r\n            break;\r\n        case 4 /* Named */:\r\n            generator.push(`${helper(\"interpolate\" /* INTERPOLATE */)}(${helper(\"named\" /* NAMED */)}(${JSON.stringify(node.key)}))`, node);\r\n            break;\r\n        case 9 /* Literal */:\r\n            generator.push(JSON.stringify(node.value), node);\r\n            break;\r\n        case 3 /* Text */:\r\n            generator.push(JSON.stringify(node.value), node);\r\n            break;\r\n        default:\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                throw new Error(`unhandled codegen node type: ${node.type}`);\r\n            }\r\n    }\r\n}\r\n// generate code from AST\r\nconst generate = (ast, options = {} // eslint-disable-line\r\n) => {\r\n    const mode = isString(options.mode) ? options.mode : 'normal';\r\n    const filename = isString(options.filename)\r\n        ? options.filename\r\n        : 'message.intl';\r\n    const sourceMap = !!options.sourceMap;\r\n    // prettier-ignore\r\n    const breakLineCode = options.breakLineCode != null\r\n        ? options.breakLineCode\r\n        : mode === 'arrow'\r\n            ? ';'\r\n            : '\\n';\r\n    const needIndent = options.needIndent ? options.needIndent : mode !== 'arrow';\r\n    const helpers = ast.helpers || [];\r\n    const generator = createCodeGenerator(ast, {\r\n        mode,\r\n        filename,\r\n        sourceMap,\r\n        breakLineCode,\r\n        needIndent\r\n    });\r\n    generator.push(mode === 'normal' ? `function __msg__ (ctx) {` : `(ctx) => {`);\r\n    generator.indent(needIndent);\r\n    if (helpers.length > 0) {\r\n        generator.push(`const { ${helpers.map(s => `${s}: _${s}`).join(', ')} } = ctx`);\r\n        generator.newline();\r\n    }\r\n    generator.push(`return `);\r\n    generateNode(generator, ast);\r\n    generator.deindent(needIndent);\r\n    generator.push(`}`);\r\n    const { code, map } = generator.context();\r\n    return {\r\n        ast,\r\n        code,\r\n        map: map ? map.toJSON() : undefined // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    };\r\n};\n\nfunction baseCompile(source, options = {}) {\r\n    const assignedOptions = assign({}, options);\r\n    // parse source codes\r\n    const parser = createParser(assignedOptions);\r\n    const ast = parser.parse(source);\r\n    // transform ASTs\r\n    transform(ast, assignedOptions);\r\n    // generate javascript codes\r\n    return generate(ast, assignedOptions);\r\n}\n\nexport { CompileErrorCodes, ERROR_DOMAIN, LocationStub, baseCompile, createCompileError, createLocation, createParser, createPosition, defaultOnError, errorMessages };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}