{"ast":null,"code":"export default {\n  data() {\n    return {\n      watermarkText: 'My Custom Watermark',\n      fontSize: 50,\n      color: '#000000',\n      angle: -45,\n      imageLoaded: false,\n      imageSrc: null\n    };\n  },\n  methods: {\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = event => {\n        this.imageLoaded = true;\n        this.imageSrc = event.target.result;\n        this.drawWatermark();\n      };\n      reader.readAsDataURL(file);\n    },\n    drawWatermark() {\n      const canvas = this.$refs.canvas;\n      const context = canvas.getContext('2d');\n      const img = new Image();\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        context.drawImage(img, 0, 0, canvas.width, canvas.height);\n        const watermarkCanvas = document.createElement('canvas');\n        watermarkCanvas.width = canvas.width / 2;\n        watermarkCanvas.height = canvas.height / 2;\n        const watermarkContext = watermarkCanvas.getContext('2d');\n        watermarkContext.font = `${this.fontSize}px Arial`;\n        watermarkContext.fillStyle = this.color;\n        watermarkContext.textAlign = 'center';\n        watermarkContext.textBaseline = 'middle';\n        const watermarkWidth = watermarkContext.measureText(this.watermarkText).width;\n        const watermarkHeight = this.fontSize;\n        const watermarkPadding = 10;\n        const watermarkMaxX = canvas.width - watermarkWidth - watermarkPadding;\n        const watermarkMaxY = canvas.height - watermarkHeight - watermarkPadding;\n        const angle = (Math.random() - 0.5) * Math.PI / 4;\n        var x = 0;\n        var y = 0;\n        for (let i = 0; i < 50; i++) {\n          watermarkContext.save();\n          watermarkContext.translate(x + watermarkWidth / 2, y + watermarkHeight / 2);\n          watermarkContext.rotate(angle);\n          watermarkContext.fillText(this.watermarkText, 0, 0, watermarkMaxX - x);\n          watermarkContext.restore();\n          x += watermarkWidth + watermarkPadding;\n          if (x > watermarkMaxX) {\n            x = 0;\n            y += watermarkHeight + watermarkPadding;\n            if (y > watermarkMaxY) {\n              break;\n            }\n          }\n        }\n        const watermarkImg = new Image();\n        watermarkImg.onload = () => {\n          context.clearRect(0, 0, canvas.width, canvas.height);\n          context.drawImage(img, 0, 0, canvas.width / 2, canvas.height / 2);\n          context.drawImage(watermarkImg, 0, 0);\n        };\n        watermarkImg.src = watermarkCanvas.toDataURL();\n      };\n      img.src = this.imageSrc;\n    },\n    addWatermark() {\n      if (this.imageLoaded) {\n        this.drawWatermark();\n      }\n    },\n    downloadImage() {\n      const canvas = this.$refs.canvas;\n      const dataURL = canvas.toDataURL('image/png');\n      const link = document.createElement('a');\n      link.download = 'watermarked-image.png';\n      link.href = dataURL;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n};","map":{"version":3,"names":["data","watermarkText","fontSize","color","angle","imageLoaded","imageSrc","methods","handleFileUpload","event","file","target","files","reader","FileReader","onload","result","drawWatermark","readAsDataURL","canvas","$refs","context","getContext","img","Image","width","height","drawImage","watermarkCanvas","document","createElement","watermarkContext","font","fillStyle","textAlign","textBaseline","watermarkWidth","measureText","watermarkHeight","watermarkPadding","watermarkMaxX","watermarkMaxY","Math","random","PI","x","y","i","save","translate","rotate","fillText","restore","watermarkImg","clearRect","src","toDataURL","addWatermark","downloadImage","dataURL","link","download","href","body","appendChild","click","removeChild"],"sources":["/Users/emperinter/app/HTML/watermark-vue/src/components/ImageWatermark.vue"],"sourcesContent":["<template>\n    <div>\n      <div align=\"center\">\n        <input type=\"file\" @change=\"handleFileUpload\">\n        <br>\n        <button @click=\"addWatermark\">Add Watermark</button>\n        <br>\n        <button @click=\"downloadImage\">Download</button>\n      </div>\n      <div>\n        <label for=\"text-input\">Watermark Text:</label>\n        <input type=\"text\" id=\"text-input\" v-model=\"watermarkText\">\n      </div>\n      <div>\n        <label for=\"font-size-input\">Font Size:</label>\n        <input type=\"number\" id=\"font-size-input\" v-model.number=\"fontSize\">\n      </div>\n      <div>\n        <label for=\"color-input\">Color:</label>\n        <input type=\"color\" id=\"color-input\" v-model=\"color\">\n      </div>\n      <div>\n        <label for=\"angle-input\">Angle:</label>\n        <input type=\"number\" id=\"angle-input\" v-model.number=\"angle\">\n      </div>\n      <canvas ref=\"canvas\"></canvas>\n\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        watermarkText: 'My Custom Watermark',\n        fontSize: 50,\n        color: '#000000',\n        angle: -45,\n        imageLoaded: false,\n        imageSrc: null,\n      };\n    },\n    methods: {\n      handleFileUpload(event) {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n  \n        reader.onload = (event) => {\n          this.imageLoaded = true;\n          this.imageSrc = event.target.result;\n          this.drawWatermark();\n        };\n  \n        reader.readAsDataURL(file);\n      },\n      drawWatermark() {\n        const canvas = this.$refs.canvas;\n        const context = canvas.getContext('2d');\n        const img = new Image();\n        img.onload = () => {\n          canvas.width = img.width;\n          canvas.height = img.height;\n          context.drawImage(img, 0, 0, canvas.width, canvas.height);\n          const watermarkCanvas = document.createElement('canvas');\n          watermarkCanvas.width = canvas.width / 2;\n          watermarkCanvas.height = canvas.height / 2;\n          const watermarkContext = watermarkCanvas.getContext('2d');\n          watermarkContext.font = `${this.fontSize}px Arial`;\n          watermarkContext.fillStyle = this.color;\n          watermarkContext.textAlign = 'center';\n          watermarkContext.textBaseline = 'middle';\n          const watermarkWidth = watermarkContext.measureText(this.watermarkText).width;\n          const watermarkHeight = this.fontSize;\n          const watermarkPadding = 10;\n          const watermarkMaxX = canvas.width - watermarkWidth - watermarkPadding;\n          const watermarkMaxY = canvas.height - watermarkHeight - watermarkPadding;\n          const angle = (Math.random() - 0.5) * Math.PI / 4;\n          var x = 0;\n          var y = 0;\n          for (let i = 0; i < 50; i++) {\n            watermarkContext.save();\n            watermarkContext.translate(x + watermarkWidth / 2, y + watermarkHeight / 2);\n            watermarkContext.rotate(angle);\n            watermarkContext.fillText(this.watermarkText, 0, 0, watermarkMaxX - x);\n            watermarkContext.restore();\n            x += watermarkWidth + watermarkPadding;\n            if (x > watermarkMaxX) {\n              x = 0;\n              y += watermarkHeight + watermarkPadding;\n              if (y > watermarkMaxY) {\n                break;\n              }\n            }\n          }\n          const watermarkImg = new Image();\n          watermarkImg.onload = () => {\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            context.drawImage(img, 0, 0, canvas.width / 2, canvas.height / 2);\n            context.drawImage(watermarkImg, 0, 0);\n          };\n          watermarkImg.src = watermarkCanvas.toDataURL();\n        };\n        img.src = this.imageSrc;\n      },\n      addWatermark() {\n        if (this.imageLoaded) {\n          this.drawWatermark();\n        }\n      },\n      downloadImage() {\n        const canvas = this.$refs.canvas;\n        const dataURL = canvas.toDataURL('image/png');\n        const link = document.createElement('a');\n        link.download = 'watermarked-image.png';\n        link.href = dataURL;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      },\n    },\n  };\n  </script>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}